# Define the graph as a dictionary where the keys are nodes and the values are lists of connected nodes.
graph = {
    '5': ['3', '7'],
    '3': ['2', '4'],
    '7': ['8'],
    '2': [],
    '4': ['8'],
    '8': []
}

# Create an empty list to keep track of visited nodes during BFS.
visited = []

# Create an empty queue to keep track of nodes to visit during BFS.
queue = []

# Define the BFS function that takes a starting node as an argument.
def bfs(visited, graph, node):
    # Add the starting node to visited and queue.
    visited.append(node)
    queue.append(node)
    
    # While there are still nodes in the queue, process the first node in the queue.
    while queue:
        # Remove the first node from the queue and process it.
        m = queue.pop(0)
        print(m, end=' ')
        
        # For each neighbor of the current node, if it has not been visited, add it to visited and queue.
        for neighbor in graph[m]:
            if neighbor not in visited:
                visited.append(neighbor)
                queue.append(neighbor)

# Print a message to the console and call the BFS function with the starting node.
print('Following is the Breadth-First Search')
bfs(visited, graph, '5')
